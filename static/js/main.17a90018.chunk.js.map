{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","value","onClick","e","toggleDarkMode","htmlFor","defaultProps","TextForm","useState","text","setText","goalValue","useRef","goal","setGoal","basicLayout","setbasicLayout","wordCount","word","split","length","pop","minutesRead","minutes","Math","round","heading","style","backgroundColor","color","rows","onChange","event","target","placeholder","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","navigator","clipboard","writeText","join","current","ref","sentence","sentenceCount","paragraph","filter","item","paragraphCount","speakingTime","Alert","val","alert","role","slice","message","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.17a90018.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Navbar.css';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode !== \"light\" ? \"dark\" : \"light\"} bg-${props.mode !== \"light\" ? \"dark\" : \"light\"}`}>\r\n            <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n                </li>\r\n                </ul>\r\n                {/* <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                    <button type=\"button\" className=\"btn btn-primary round-button mx-1\" value=\"blue\" onClick={e => props.toggleDarkMode(e)}></button>\r\n                    <button type=\"button\" className=\"btn btn-success round-button mx-1\" value=\"green\" onClick={e => props.toggleDarkMode(e)}></button>\r\n                    <button type=\"button\" className=\"btn btn-danger round-button mx-1\" value=\"red\" onClick={e => props.toggleDarkMode(e)}></button>\r\n                    {/* <input className=\"form-check-input\" onClick={props.toggleDarkMode} type=\"button\" role=\"switch\" id=\"flexSwitchCheckDefault\" /> */}\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Project Title',\r\n    about: 'About Us'\r\n}","import React, {useState, useRef} from 'react';\r\nimport './TextForm.css'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const goalValue = useRef(0);\r\n    const [goal, setGoal] = useState(0);\r\n    const [basicLayout, setbasicLayout] = useState(true);\r\n\r\n    const handleChangeEvent = (event) => {\r\n        setText(event.target.value);\r\n        // console.log(\"Inside OnChange\");\r\n    }\r\n\r\n    const handleUpperClickEvent = () => {\r\n        // console.log(\"Inside OnClick\");\r\n        const newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text Converted to Upper Case\", \"success\");\r\n    }\r\n\r\n    const handleLowerClickEvent = () => {\r\n        // console.log(\"Inside OnClick\");\r\n        const newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text Converted to Lower Case\", \"success\");\r\n    }\r\n\r\n    const wordCount = () => {\r\n        const word = text.split(\" \");\r\n        if (word[word.length - 1]) {\r\n            return word;\r\n        }\r\n        word.pop();\r\n        return word;\r\n    }\r\n\r\n    const sentenceCount = () => {\r\n        const sentence = text.split(\".\");\r\n        if (sentence[sentence.length - 1]) {\r\n            return sentence;\r\n        }\r\n        sentence.pop();\r\n        return sentence;\r\n    }\r\n\r\n    const paragraphCount = () => {\r\n        const paragraph = text.split(\"\\n\").filter(item => \r\n            { \r\n                if (item) \r\n                { \r\n                    return item \r\n                } \r\n                return false\r\n            } \r\n        );\r\n        if (paragraph[paragraph.length - 1]) {\r\n            return paragraph;\r\n        }\r\n        paragraph.pop();\r\n        return paragraph;\r\n    }\r\n\r\n    const minutesRead = () => {\r\n        const minutes = 0.008 * wordCount().length;\r\n        if (minutes > 0) {\r\n            return Math.round(minutes * 100) / 100;\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    const speakingTime = () => {\r\n        const minutes = 0.004 * wordCount().length;\r\n        if (minutes > 0) {\r\n            return Math.round(minutes * 100) / 100;\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    const handleLayout = () => {\r\n        setbasicLayout(!basicLayout);\r\n    }\r\n\r\n    const handleGoal = () => {\r\n        setGoal(goalValue.current.value);\r\n        goalValue.current.value = 0;\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        const text = document.getElementById(\"myBox\");\r\n        // text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Message is copied\", \"success\");\r\n\r\n        // goalValue.current.value = 0;\r\n    }\r\n    const handleExtraSpace = () => {\r\n        const newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces removed\", \"success\");\r\n        // goalValue.current.value = 0;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"mb-3\">\r\n                <h1 className=\"my-3\">{props.heading}</h1>\r\n                <label htmlFor=\"myBox\" className=\"form-label\">Example textarea</label>\r\n                <textarea className=\"form-control mb-3\" style={{backgroundColor: `${props.mode !== \"light\" ? \"grey\" : \"white\"}`, color: `${props.mode !== \"light\" ? \"white\" : \"grey\"}`}} value={text} id=\"myBox\" rows=\"8\" \r\n                    onChange={handleChangeEvent} placeholder=\"Enter value to convert\"></textarea>\r\n\r\n            </div>\r\n            <div className=\"d-flex\">\r\n                <button className={`btn btn-${props.mode} mx-1`} onClick={handleUpperClickEvent}>Convert To UpperCase</button>\r\n                <button className={`btn btn-${props.mode} mx-1`} onClick={handleLowerClickEvent}>Convert To LowerCase</button>\r\n                <button className={`btn btn-${props.mode} mx-1`} onClick={handleCopy}>Copy To Clipboard</button>\r\n                <button className={`btn btn-${props.mode} mx-1`} onClick={handleExtraSpace}>Remove Extra Space</button>\r\n            </div>\r\n            <div className=\"d-flex my-3 justify-content-between\">\r\n                <div className=\"text-summary\">\r\n                    <h2 className=\"\">Your Word Summary</h2>\r\n                    <p>{wordCount().length} words and {text.length} characters</p>\r\n                    <p>\r\n                        {minutesRead()} minutes read\r\n                        \r\n                        <button \r\n                            className={`${basicLayout ? 'btn-info' : 'btn-primary'} btn mx-3`} \r\n                            onClick={handleLayout}>\r\n                                {basicLayout ? 'Hide Details' : 'Show Details'}\r\n                        </button>\r\n                    </p>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"wordGoal\" className=\"form-label\">Enter word goal (only numbers)</label>\r\n                        <button \r\n                            className=\"btn btn-warning mx-3 my-3\"\r\n                            onClick={handleGoal}>\r\n                                Set Goal\r\n                        </button>\r\n                        <input ref={goalValue} type=\"number\" className=\"form-control\" id=\"wordGoal\" placeholder=\"500\" />\r\n                    </div>\r\n                    {goal > 0 ? \r\n                    <p>Selected Goal {goal}</p> : null}\r\n                    {/* {wordCount().length >= goal ?\r\n                        <div className=\"modal\" tabIndex=\"-1\">\r\n                            <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n                                <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">Modal title</h5>\r\n                                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div className=\"modal-body\">\r\n                                <p>Modal body text goes here.</p>\r\n                                </div>\r\n                                <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                                <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n                        </div> \r\n                    : null} */}\r\n                    {text.length > 0 ?\r\n                        <>\r\n                        <h2>Text Preview :</h2>\r\n                        <p>{text}</p>\r\n                        </> : null\r\n                    }\r\n                </div>\r\n                {basicLayout ? \r\n                <div>\r\n                    <h2>Other Details</h2>\r\n                    <table className=\"table table-bordered\">\r\n                        <tbody>\r\n                            <tr>\r\n                            <td style={{color: `${props.mode !== \"light\" ? \"white\" : \"black\"}`}}>Words</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{wordCount().length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: `${props.mode !== \"light\" ? \"white\" : \"black\"}`}}>Characters</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{text.length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: `${props.mode !== \"light\" ? \"white\" : \"black\"}`}}>Sentences</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{sentenceCount().length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: `${props.mode !== \"light\" ? \"white\" : \"black\"}`}}>Paragraphs</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{paragraphCount().length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: `${props.mode !== \"light\" ? \"white\" : \"black\"}`}}>Reading Time</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{minutesRead()} minutes</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td style={{color: `${props.mode !== \"light\" ? \"white\" : \"black\"}`}}>Speaking Time</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{speakingTime()} minutes</span></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>         \r\n                    \r\n                </div> : null}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalise = (val) => {\r\n        return val[0].toUpperCase() + val.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&\r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalise(props.alert.type)}:</strong> {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import Friends from './Components/Friends/Friends';\n// import Test from './Components/Test/Test';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleDarkMode = (val) => {\n    if (val.target.value === \"red\") {\n      setMode(\"danger\");\n      document.body.style.backgroundColor = \"#23040e\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark Mode is enabled\", \"success\");\n    } else if (val.target.value === \"blue\") {\n      setMode(\"primary\");\n      document.body.style.backgroundColor = \"#031527\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark Mode is enabled\", \"success\");\n    } else if (val.target.value === \"green\") {\n      setMode(\"success\");\n      document.body.style.backgroundColor = \"#02130b\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark Mode is enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#02130b\";\n      document.body.style.color = \"black\";\n      showAlert(\"Dark Mode is enabled\", \"success\");\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setAlert( {\n      message: message,\n      type: type\n    });\n    setTimeout(setAlert, 1500, null);\n  }\n  return (\n    <>\n      <Navbar \n        title=\"Text Utils\"\n        mode={mode}\n        toggleDarkMode={toggleDarkMode} />\n      {/* <Navbar /> */}\n      <Alert \n        alert={alert} />\n      <div className=\"container\">\n        <TextForm \n          mode={mode}\n          heading=\"Enter Text To convert to needed Format\"\n          showAlert={showAlert}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}