{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","title","type","id","about","placeholder","defaultProps","TextForm","useState","text","setText","goalValue","useRef","goal","setGoal","basicLayout","setbasicLayout","wordCount","word","split","length","pop","minutesRead","minutes","Math","round","handleGoal","current","value","heading","htmlFor","rows","onChange","event","target","onClick","newText","toUpperCase","toLowerCase","for","ref","sentence","sentenceCount","paragraph","filter","item","paragraphCount","speakingTime","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a844821.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n                </li>\r\n                </ul>\r\n                <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                </form>\r\n            </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Project Title',\r\n    about: 'About Us'\r\n}","import React, {useState, useRef} from 'react';\r\nimport './TextForm.css'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const goalValue = useRef(0);\r\n    const [goal, setGoal] = useState(0);\r\n    const [basicLayout, setbasicLayout] = useState(true);\r\n\r\n    const handleChangeEvent = (event) => {\r\n        setText(event.target.value);\r\n        // console.log(\"Inside OnChange\");\r\n    }\r\n\r\n    const handleUpperClickEvent = () => {\r\n        // console.log(\"Inside OnClick\");\r\n        const newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleLowerClickEvent = () => {\r\n        // console.log(\"Inside OnClick\");\r\n        const newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const wordCount = () => {\r\n        const word = text.split(\" \");\r\n        if (word[word.length - 1]) {\r\n            return word;\r\n        }\r\n        word.pop();\r\n        return word;\r\n    }\r\n\r\n    const sentenceCount = () => {\r\n        const sentence = text.split(\".\");\r\n        if (sentence[sentence.length - 1]) {\r\n            return sentence;\r\n        }\r\n        sentence.pop();\r\n        return sentence;\r\n    }\r\n\r\n    const paragraphCount = () => {\r\n        const paragraph = text.split(\"\\n\").filter(item => \r\n            { \r\n                if (item) \r\n                { \r\n                    return item \r\n                } \r\n                return false\r\n            } \r\n        );\r\n        if (paragraph[paragraph.length - 1]) {\r\n            return paragraph;\r\n        }\r\n        paragraph.pop();\r\n        return paragraph;\r\n    }\r\n\r\n    const minutesRead = () => {\r\n        const minutes = 0.008 * wordCount().length;\r\n        if (minutes > 0) {\r\n            return Math.round(minutes * 100) / 100;\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    const speakingTime = () => {\r\n        const minutes = 0.004 * wordCount().length;\r\n        if (minutes > 0) {\r\n            return Math.round(minutes * 100) / 100;\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    const handleLayout = () => {\r\n        setbasicLayout(!basicLayout);\r\n    }\r\n\r\n    const handleGoal = () => {\r\n        setGoal(goalValue.current.value);\r\n        goalValue.current.value = 0;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"mb-3\">\r\n                <h1 className=\"my-3\">{props.heading}</h1>\r\n                <label htmlFor=\"myBox\" className=\"form-label\">Example textarea</label>\r\n                <textarea className=\"form-control mb-3\" value={text} id=\"myBox\" rows=\"8\" \r\n                    onChange={handleChangeEvent} placeholder=\"Enter value to convert\"></textarea>\r\n                <button className=\"btn btn-success mx-1\" onClick={handleUpperClickEvent}>Convert To UpperCase</button>\r\n                <button className=\"btn btn-success mx-1\" onClick={handleLowerClickEvent}>Convert To LowerCase</button>\r\n                <button className=\"btn btn-success mx-1\" onClick={handleGoal}>Select Writing Goal</button>\r\n            </div>\r\n            <div className=\"d-flex my-3 justify-content-between\">\r\n                <div className=\"text-summary\">\r\n                    <h2 className=\"\">Your Word Summary</h2>\r\n                    <p>{wordCount().length} words and {text.length} characters</p>\r\n                    <p>\r\n                        {minutesRead()} minutes read\r\n                        \r\n                        <button \r\n                            className={`${basicLayout ? 'btn-info' : 'btn-primary'} btn mx-3`} \r\n                            onClick={handleLayout}>\r\n                                {basicLayout ? 'Hide Details' : 'Show Details'}\r\n                        </button>\r\n                    </p>\r\n                    <div className=\"mb-3\">\r\n                        <label for=\"wordGoal\" className=\"form-label\">Enter word goal (only numbers)</label>\r\n                        <button \r\n                            className=\"btn btn-warning mx-3 my-3\"\r\n                            onClick={handleGoal}>\r\n                                Set Goal\r\n                        </button>\r\n                        <input ref={goalValue} type=\"number\" className=\"form-control\" id=\"wordGoal\" placeholder=\"500\" />\r\n                    </div>\r\n                    {goal > 0 ? \r\n                    <p>Selected Goal {goal}</p> : null}\r\n                    {/* {wordCount().length >= goal ?\r\n                        <div className=\"modal\" tabIndex=\"-1\">\r\n                            <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n                                <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">Modal title</h5>\r\n                                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div className=\"modal-body\">\r\n                                <p>Modal body text goes here.</p>\r\n                                </div>\r\n                                <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                                <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n                        </div> \r\n                    : null} */}\r\n                    {text.length > 0 ?\r\n                        <>\r\n                        <h2>Text Preview :</h2>\r\n                        <p>{text}</p>\r\n                        </> : null\r\n                    }\r\n                </div>\r\n                {basicLayout ? \r\n                <div>\r\n                    <h2>Other Details</h2>\r\n                    <table className=\"table table-bordered\">\r\n                        <tbody>\r\n                            <tr>\r\n                            <td>Words</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{wordCount().length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td>Characters</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{text.length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td>Sentences</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{sentenceCount().length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td>Paragraphs</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{paragraphCount().length}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td>Reading Time</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{minutesRead()} minutes</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                            <td>Speaking Time</td>\r\n                            <td className=\"detail\"><span className=\"table-badge\">{speakingTime()} minutes</span></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>         \r\n                    \r\n                </div> : null}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\n// import Friends from './Components/Friends/Friends';\n// import Test from './Components/Test/Test';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n\nfunction App() {\n  return (\n    <>\n      <Navbar \n        title=\"Text Utils\" />\n      {/* <Navbar /> */}\n        <div className=\"container\">\n          <TextForm \n            heading=\"Enter Text To convert to needed Format\"/>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}